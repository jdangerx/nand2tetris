// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
    // zx nx zy ny  f no
    //  1  0  0  0  0  0     0  reset
    //  1  1  0  0  0  0     y  load
    //  0  1  1  1  1  1     x+1  inc
    //  0  0  1  1  0  0     x  nothing

    //  zx == (reset||load) && (!inc)
    //  nx == (load||inc) && (!reset)
    //  zy == !(reset||load)
    //  ny == !(reset||load)
    //  f == !(reset||load) && inc
    //  no = !(reset||load) && inc

    Not(in=reset, out=notR);
    Not(in=inc, out=notI);
    Or(a=load, b=inc, out=orLI);
    Or(a=reset, b=load, out=orRL);
    Not(in=orRL, out=norRL);

    Or(a=reset, b=load, out=zx);
    And(a=orLI, b=notR, out=nx);
    Mux(a=norRL, b=norRL, sel=false, out=zy, out=ny);
    And(a=norRL, b=inc, out=f, out=no);
    ALU(x=registerContents, y=in, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=newState);
    Register(in=newState, load=true, out=registerContents, out=out);
}
